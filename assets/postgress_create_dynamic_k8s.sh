#!/bin/bash

# Set the command prefix if using a specialized kube config
KUBECMD_PREFIX="${KUBECMD_PREFIX:=microk8s}"
CERT_MANAGER_NAMESPACE="cert-manager" # Adjust as necessary

$KUBECMD_PREFIX kubectl create namespace $K8_NAMESPACE || true

# Creating Certificate resource for cert-manager to generate the certificate secret
cat <<EOF | $KUBECMD_PREFIX kubectl apply -f -
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: $RELEASE_NAME-postgresql-tls
  namespace: $K8_NAMESPACE
spec:
  secretName: $RELEASE_NAME-postgresql-tls
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-prod
  dnsNames:
  - $DB_HOSTNAME
EOF

# Wait for the certificate secret to be ready before proceeding with Helm installation
$KUBECMD_PREFIX kubectl -n $K8_NAMESPACE wait --for=condition=ready certificate $RELEASE_NAME-postgresql-tls --timeout=300s

# Now proceed with the Helm installation
read -r -d '' VALUES << EOM
global:
  postgresql:
    auth:
      username: "$DB_USERNAME"
      password: "$DB_PASSWORD"
      database: "$DB_NAME"
clusterDomain: "$DB_CLUSTER_DOMAIN"
tls:
  enabled: true
  certManager: true
  autoGenerated: false
  certificatesSecret: "$RELEASE_NAME-postgresql-tls"
  certFilename: "tls.crt"
  certKeyFilename: "tls.key"
backup:
  enabled: true
  cronjob:
    schedule: "0 */6 * * *"
    storage:
      enabled: true
      storageClass: ""
      accessModes:
        - ReadWriteOnce
      size: 50Gi
      mountPath: "$BACKUP_MOUNT_PATH"
      subPath: ""
EOM

$KUBECMD_PREFIX helm install $RELEASE_NAME oci://registry-1.docker.io/bitnamicharts/postgresql \
    -n $K8_NAMESPACE \
    -f- <<< "$VALUES" 


# Existing ingress configuration
read -r -d '' INGRESS_CONFIG << EOM
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-ingress-tcp-microk8s-conf
  namespace: ingress
data:
  5432: "$K8_NAMESPACE/$RELEASE_NAME-postgresql:5432"
---
apiVersion: v1
kind: Service
metadata:
  name: $RELEASE_NAME-nodeport
  namespace: $K8_NAMESPACE
spec:
  type: NodePort
  ports:
    - name: tcp-postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: $TARGET_PORT
  selector:
    app.kubernetes.io/instance: $RELEASE_NAME
    app.kubernetes.io/name: postgresql
EOM

# Apply ingress configuration
$KUBECMD_PREFIX kubectl apply -f - <<< "$INGRESS_CONFIG"
